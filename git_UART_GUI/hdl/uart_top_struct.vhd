-- VHDL Entity git_UART_GUI.uart_top.symbol
--
-- Created:
--          by - JSmith.UNKNOWN (EGC-WALY-LT)
--          at - 11:25:05 10/03/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2020.3 Built on 24 Jun 2020 at 21:00:22
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY uart_top IS
   PORT( 
      -- 3-bit address bus
      addr   : IN     std_logic_vector (2 DOWNTO 0);
      clk    : IN     std_logic;                      -- 10 MHz clock
      cs     : IN     std_logic;                      -- chip select
      datin  : IN     std_logic_vector (7 DOWNTO 0);  -- data from cpu
      nrw    : IN     std_logic;                      -- r(0), w(1)
      rst    : IN     std_logic;                      -- reset(0)
      sin    : IN     std_logic;                      -- serial input
      datout : OUT    std_logic_vector (7 DOWNTO 0);  -- data to cpu
      int    : OUT    std_logic;                      -- interrupt (1)
      sout   : OUT    std_logic                       -- serial output
   );

-- Declarations

END uart_top ;

--
-- VHDL Architecture git_UART_GUI.uart_top.struct
--
-- Created:
--          by - waly.UNKNOWN (EGC-WALY-LT)
--          at - 03:28:16 06/29/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2020.3 Built on 24 Jun 2020 at 21:00:22
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY UART;

ARCHITECTURE struct OF uart_top IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL clear_flags     : std_logic;
   SIGNAL clk_div_en      : std_logic;
   SIGNAL clr_int_en      : std_logic;
   SIGNAL div_data        : std_logic_vector(7 DOWNTO 0);
   SIGNAL enable_rcv_clk  : std_logic;
   SIGNAL enable_write    : std_logic;
   SIGNAL enable_xmit_clk : std_logic;
   SIGNAL sample          : std_logic;
   SIGNAL ser_if_data     : std_logic_vector(7 DOWNTO 0);
   SIGNAL ser_if_select   : std_logic_vector(1 DOWNTO 0);
   SIGNAL start_xmit      : std_logic;
   SIGNAL xmitdt_en       : std_logic;


   -- Component Declarations
   COMPONENT clock_divider
   PORT (
      addr            : IN     std_logic;
      clk             : IN     std_logic;
      clk_div_en      : IN     std_logic;
      datin           : IN     std_logic_vector (7 DOWNTO 0);
      enable_rcv_clk  : IN     std_logic;
      enable_write    : IN     std_logic;
      enable_xmit_clk : IN     std_logic;
      rst             : IN     std_logic;
      div_data        : OUT    std_logic_vector (7 DOWNTO 0);
      sample          : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT cpu_interface
   PORT (
      clk          : IN     std_logic;
      clk_div_en   : IN     std_logic;
      clr_int_en   : IN     std_logic;
      cs           : IN     std_logic;
      div_data     : IN     std_logic_vector (7 DOWNTO 0);
      nrw          : IN     std_logic;
      rst          : IN     std_logic;
      ser_if_data  : IN     std_logic_vector (7 DOWNTO 0);
      xmitdt_en    : IN     std_logic;
      clear_flags  : OUT    std_logic;
      datout       : OUT    std_logic_vector (7 DOWNTO 0);
      enable_write : OUT    std_logic;
      start_xmit   : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : clock_divider USE ENTITY UART.clock_divider;
   FOR ALL : cpu_interface USE ENTITY UART.cpu_interface;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_2 : clock_divider
      PORT MAP (
         addr            => addr(0),
         clk             => clk,
         clk_div_en      => clk_div_en,
         datin           => datin,
         enable_rcv_clk  => enable_rcv_clk,
         enable_write    => enable_write,
         enable_xmit_clk => enable_xmit_clk,
         rst             => rst,
         div_data        => div_data,
         sample          => sample
      );
   U_1 : cpu_interface
      PORT MAP (
         clk          => clk,
         clk_div_en   => clk_div_en,
         clr_int_en   => clr_int_en,
         cs           => cs,
         div_data     => div_data,
         nrw          => nrw,
         rst          => rst,
         ser_if_data  => ser_if_data,
         xmitdt_en    => xmitdt_en,
         clear_flags  => clear_flags,
         datout       => datout,
         enable_write => enable_write,
         start_xmit   => start_xmit
      );

END struct;
